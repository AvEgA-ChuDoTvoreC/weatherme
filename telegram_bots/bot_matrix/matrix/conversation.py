import os
import random

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from telegram_bots.bot_matrix.clients.info import GetUserInfo
from telegram_bots.bot_matrix.matrix.markups import user_keyboard_markup, extra_keyboard_markup, user_keyboard_markup2

STICKER_RED_WOMAN = 'AgADbgIAAtzyqwc'
STICKER_NEO = 'AgADeQIAAtzyqwc'
STICKER_NEO_EVASION = 'AgADaQIAAtzyqwc'
STICKER_MORPHEUS = 'AgADeAIAAtzyqwc'
STICKER_RABBIT = 'AgADbAIAAtzyqwc'
STICKER_TRINITY_HI = 'AgADNwQAAj-VzAo'
STICKER_TRINITY_SHH = 'AgADOAQAAj-VzAo'
STICKER_TRINITY_ADVICE = 'AgADPgQAAj-VzAo'
STICKER_TRINITY_LOVE = 'AgADdQIAAtzyqwc'


class GenerateMarkup:
    def gen_morpheus_markup(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("Yes", callback_data="morpheus_yes"),
                   InlineKeyboardButton("No", callback_data="morpheus_no"))
        return markup

    def gen_trinity_markup_club1(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–û —á–µ–º? üêá ", callback_data="trinity_yes1"))
        return markup

    def gen_trinity_markup_club2(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –ú–∞—Ç—Ä–∏—Ü–∞? üêá ", callback_data="trinity_yes2"))
        return markup

    def gen_trinity_markup_hostel(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–¢–∞–∫, —ç—Ç–æ –±—ã–ª –Ω–µ —Å–æ–Ω? üêá ", callback_data="trinity_yes3"))
        return markup

    def gen_rabbit_markup(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–ü–æ–π—Ç–∏ –∑–∞ –∫—Ä–æ–ª–∏–∫–æ–º üêá ", callback_data="rabbit_yes"))
        return markup

    def gen_woman_in_red_markup(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton(" üêá ", callback_data="woman_in_red_yes"))
        return markup

    def gen_again_start_markup(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton(" üêá ", callback_data="alarm_yes"),
                   InlineKeyboardButton("No", callback_data="alarm_no"))
        return markup


class MatrixConversation(GenerateMarkup):

    def __init__(self, tbot, tcall=None, tmessage=None):
        self.bot = tbot
        self.call = tcall
        self.message = tmessage

    def answer_help_info(self):
        self.bot.send_message(chat_id=self.message.from_user.id,
                              text=f"""
        <b>–ù–µ–æ:</b>
        /help - help menu
        /start - —Å—Ç–∞—Ä—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        /stop - —Å–∫—Ä—ã—Ç—å –¥–æ–ø –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        /show_my_photo - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ñ–æ—Ç–∫—É (–ª–∏–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é)
        /send_location - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        
        <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
        -–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–∫
        -–æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        -–∫–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ç–∞
        -–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ (tip: –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã)
        
        Have Fun & Good Luck
        """, parse_mode='HTML', reply_markup=user_keyboard_markup())

    def answer_hello(self):
        self.bot.send_message(chat_id=self.message.chat.id,
                              text="""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ù–µ–æ.
        """, parse_mode='markdown')
        self.bot.send_sticker(chat_id=self.message.chat.id,
                              data='CAACAgIAAxkBAAIB52CFEYsUWPehKf8hnXYvRgyEbz2cAAI3BAACP5XMCkLU7Ai1u05wHwQ',
                              reply_markup=self.gen_woman_in_red_markup())

    def answer_weather(self):
        self.bot.send_message(chat_id=self.message.from_user.id,
                              text=f"""
        <b>–ù–µ–æ:</b>
        –ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ; –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π!
        –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å, –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π ‚Äî
        –ü–æ—Ä–∞, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞, –ø—Ä–æ—Å–Ω–∏—Å—å:
        –û—Ç–∫—Ä–æ–π —Å–æ–º–∫–Ω—É—Ç—ã –Ω–µ–≥–æ–π –≤–∑–æ—Ä—ã
        –ù–∞–≤—Å—Ç—Ä–µ—á—É —Å–µ–≤–µ—Ä–Ω–æ–π –ê–≤—Ä–æ—Ä—ã,
        –ó–≤–µ–∑–¥–æ—é —Å–µ–≤–µ—Ä–∞ —è–≤–∏—Å—å!
        """, parse_mode='HTML', reply_markup=user_keyboard_markup())

    def answer_whoami(self, user_info_dict):
        if user_info_dict:
            self.bot.send_message(chat_id=self.message.from_user.id,
                                  text=f"""
        <b>–ê–≥–µ–Ω—Ç –°–º–∏—Ç:</b>
        id:                {user_info_dict.get("id")}
        username:   {user_info_dict.get("username")}
        first_name: {user_info_dict.get("first_name")}
        last_name:  {user_info_dict.get("last_name")}
        """, parse_mode='HTML', reply_markup=user_keyboard_markup())

        else:
            user_info_dict = GetUserInfo(tmessage=self.message).gather_fields()
            self.bot.send_message(chat_id=self.message.from_user.id,
                                  text=f"""
        <b>–ê–≥–µ–Ω—Ç –°–º–∏—Ç2:</b>
        id:                {user_info_dict.get("id")}
        username:   {user_info_dict.get("username")}
        first_name: {user_info_dict.get("first_name")}
        last_name:  {user_info_dict.get("last_name")}
        """, parse_mode='HTML', reply_markup=user_keyboard_markup())

    def answer_your_location(self):
        self.bot.send_message(self.message.from_user.id,
                              text=f"""
        *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:*
        —à–∏—Ä–æ—Ç–∞: {self.message.location.latitude}
        –¥–æ–ª–≥–æ—Ç–∞: {self.message.location.longitude}
        ({self.message.location.latitude},{self.message.location.longitude})
        """, parse_mode='markdown', reply_markup=extra_keyboard_markup())

    def answer_my_position(self):
        self.bot.send_message(self.message.from_user.id,
                              text=f"""
        *–ú–æ—Ä—Ñ–µ—É—Å:*
        –¢—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ? –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–≤—Å—é–¥—É. 
        –û–Ω–∞ –æ–∫—Ä—É–∂–∞–µ—Ç –Ω–∞—Å. –î–∞–∂–µ —Å–µ–π—á–∞—Å –æ–Ω–∞ —Å –Ω–∞–º–∏ —Ä—è–¥–æ–º. 
        –¢—ã –≤–∏–¥–∏—à—å –µ–µ, –∫–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—à—å –≤ –æ–∫–Ω–æ –∏–ª–∏ –≤–∫–ª—é—á–∞–µ—à—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä. 
        –¢—ã –æ—â—É—â–∞–µ—à—å –µ–µ, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—à—å, –∏–¥–µ—à—å –≤ —Ü–µ—Ä–∫–æ–≤—å, 
        –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–∏—à—å –Ω–∞–ª–æ–≥–∏. 
        –¶–µ–ª—ã–π –º–∏—Ä–æ–∫, –Ω–∞–¥–≤–∏–Ω—É—Ç—ã–π –Ω–∞ –≥–ª–∞–∑–∞, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å –ø—Ä–∞–≤–¥—É.
        
        –ß—Ç–æ —Ç—ã —Ç–æ–ª—å–∫–æ —Ä–∞–±, –ù–µ–æ. 
        –ö–∞–∫ –∏ –≤—Å–µ, —Ç—ã —Å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ü–µ–ø—è—Ö. –° —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç—é—Ä—å–º–µ, 
        –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –ø–æ—á—É–µ—à—å –∏ –Ω–µ –∫–æ—Å–Ω–µ—à—å—Å—è. –í —Ç–µ–º–Ω–∏—Ü–µ –¥–ª—è —Ä–∞–∑—É–º–∞.
        """, parse_mode='markdown', reply_markup=user_keyboard_markup())
        self.bot.send_location(self.message.from_user.id, '55.727638', '37.619839')

    def answer_morpheus_welcome(self, bot_name, bot_username):
        self.bot.send_message(self.message.from_user.id,
                              text=f"""
        –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.
        –ö–∞–∫ —Ç—ã —É–∂–µ –ø–æ–Ω—è–ª, —è - *{bot_name}*.
        (@{bot_username})

        –ù–µ –∑–Ω–∞—é, –≥–æ—Ç–æ–≤ –ª–∏ —Ç—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω,
        –Ω–æ, —É–≤—ã, —É –Ω–∞—Å –≤—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ.

        *–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥*
        –í—Å–µ —É–∂–µ –ø—Ä–æ–¥—É–º–∞–ª–∏ –∑–∞ —Ç–µ–±—è, –ù–µ–æ.üëá
        """, parse_mode='markdown', reply_markup=user_keyboard_markup())

    def answer_empty_with_markup(self, markup):
        self.bot.send_message(self.message.from_user.id,
                              text='...', reply_markup=markup, parse_mode='markdown')

    def stackoverflow(self):
        self.bot.send_message(self.message.from_user.id,
                              text=f"""
        *Morpheus:*
        Welcome back, Neo!üëá
        """, parse_mode='markdown', reply_markup=user_keyboard_markup2())

    def answer_angry(self):
        self.bot.send_message(self.message.from_user.id,
                              text=f"""
        *–ü–∏—Ñ–∏—è:*
        –ú–Ω–µ –∂–∞–ª—å, –º–∞–ª—ã—à, –ø—Ä–∞–≤–¥–∞, —Ç—ã –¥–æ–±—Ä–∞—è –¥—É—à–∞...
        –Ω–æ –Ω–∞–º –≤—Å–µ —Ç–∞–∫–∏ –ø—Ä–∏–¥–µ—Ç—Å—è —Ç–µ–±—è –ø—Ä–æ—É—á–∏—Ç—å, –∏, 
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ª–æ–∂–∫—É –Ω–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é...
        
        –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π –∏
        –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ.""", parse_mode='markdown')

    def answer_photo(self):
        #     #all_files = os.listdir(directory)
        #     #random_file = random.choice(all_files)
        #     url = "—Ñ–æ—Ç–æ1"
        #     urllib2.urlretrieve(url,'url_image.jpg')
        #     #img = open(directory + '/' + random_file, 'rb')
        img = open('tbot_data/image/marcin-blaszczak.jpg', 'rb')
        self.bot.send_chat_action(self.message.from_user.id, 'upload_photo')
        self.bot.send_photo(
            chat_id=self.message.from_user.id,
            photo=img,
            reply_markup=user_keyboard_markup())
        img.close()

    def answer_heart(self):
        folder = 'tbot_data'
        owner = 'default'
        name = 'love_is'
        all_love_is = os.listdir(os.path.join(folder, owner, name))
        random_file = random.choice(all_love_is)
        filepath = os.path.join(folder, owner, name, random_file)

        love_is = open(filepath, 'rb')
        self.bot.send_chat_action(self.message.from_user.id, 'upload_photo')
        self.bot.send_photo(
            chat_id=self.message.from_user.id,
            photo=love_is,
            reply_markup=extra_keyboard_markup())
        love_is.close()

    def answer_show_uploaded_photo(self):
        folder = 'clients_data'
        owner = str(self.message.from_user.id)
        name = owner + '.jpg'
        filepath = os.path.join(folder, owner, name)

        if os.path.exists(filepath):
            img = open(filepath, 'rb')
            self.bot.send_chat_action(self.message.from_user.id, 'upload_photo')
            self.bot.send_photo(
                chat_id=self.message.from_user.id,
                photo=img,
                reply_markup=extra_keyboard_markup())
            img.close()
        else:
            folder = 'tbot_data'
            owner = 'default'
            name = 'tenor-2' + '.gif'
            filepath = os.path.join(folder, owner, name)

            img = open(filepath, 'rb')
            self.bot.send_chat_action(self.message.from_user.id, 'upload_photo')
            self.bot.send_animation(
                chat_id=self.message.from_user.id,
                animation=img,
                reply_markup=extra_keyboard_markup())
            img.close()

    # def answer_start_car_conversation(self):
    #     msg = self.bot.reply_to(message=self.message,
    #                             text="""\
    #     *–¢—Ä–∏–Ω–∏—Ç–∏:*
    #     –•–æ—Ä–æ—à–æ, –ù–µ–æ.
    #     –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    #     –≤ —Å–∏—Å—Ç–µ–º–µ!
    #     –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, —ç—Ç–æ –ª–∏—à—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å.
    #
    #     *–¢–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?:*
    #     """, parse_mode='markdown', reply_markup=extra_keyboard_markup())
    #     self.bot.register_next_step_handler(msg, self.car_dialog_initial)
    #
    # def car_dialog_initial(self, message):
    #     print("car dialog")
    #     try:
    #         chat_id = message.chat.id
    #         name = message.text
    #         user = User(name)
    #         USER_CAR_INFO_DICT[chat_id] = user
    #         msg = self.bot.reply_to(message=message,
    #                                 text="""
    #     *–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è?:*
    #     """, parse_mode='markdown', reply_markup=extra_keyboard_markup())
    #         self.bot.register_next_step_handler(msg, self.process_age_step)
    #     except Exception as e:
    #         self.bot.reply_to(self.message, 'oooops')
    #
    # def process_age_step(self, message):
    #     pass

    def extra_woman_in_red(self):
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAAIDoGCFVBQhliLAE45J-H7htdXCZv2iAAJuAgAC3PKrB6DdpwZCektiHwQ')

    def extra_menu(self):
        self.bot.send_message(chat_id=self.message.from_user.id,
                              text=f"""
        <b>–ú–æ—Ä—Ñ–µ—É—Å:</b>
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏, —Å–∞–¥–∏—Å—å.
        """, parse_mode='HTML', reply_markup=extra_keyboard_markup())

    def main_menu(self):
        self.bot.send_message(chat_id=self.message.from_user.id,
                              text=f"""
        <b>–ú–æ—Ä—Ñ–µ—É—Å:</b>
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏, —Å–∞–¥–∏—Å—å.
        """, parse_mode='HTML', reply_markup=user_keyboard_markup())

    def start_questions(self):
        self.bot.delete_message(
            chat_id=self.message.chat.id,
            message_id=self.message.message_id + 1)

        self.bot.send_sticker(chat_id=self.message.chat.id,
                              data='CAACAgIAAxkBAANiYINIK4Bm7D0oxgwL8JAV0roV1NUAAmwCAALc8qsHuunt_I5doFofBA',
                              reply_markup=self.gen_rabbit_markup())

    def rabbit_question(self):
        self.bot.send_message(chat_id=self.call.message.chat.id,
                              text="""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ù–µ–æ.
        –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢—Ä–∏–Ω–∏—Ç–∏.
        –°–µ–π—á–∞—Å —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –æ–¥–Ω–æ. –¢—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å.
        """, parse_mode='markdown')

        self.bot.answer_callback_query(self.call.id, "–î–∞, –±—Ä–æ—Å—å. –¢–∞–º –ø—Ä–∏–∫–æ–ª—å–Ω–æ. –í–æ—Ç —É–≤–∏–¥–∏—à—å.", cache_time='4')
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAAIB52CFEYsUWPehKf8hnXYvRgyEbz2cAAI3BAACP5XMCkLU7Ai1u05wHwQ',
                              reply_markup=self.gen_trinity_markup_club1())

    def trinity_question_in_club(self):
        self.bot.send_message(chat_id=self.call.message.chat.id,
                              text="""
        –ú–æ–ª—á–∏ –∏ —Å–ª—É—à–∞–π. –Ø –∑–Ω–∞—é, –ø–æ—á–µ–º—É —Ç—ã –∑–¥–µ—Å—å. 
        –ó–Ω–∞—é, —á—Ç–æ —Ç–µ–±—è –≥–Ω–µ—Ç–µ—Ç. –ü–æ—á–µ–º—É —Ç—ã –Ω–µ —Å–ø–∏—à—å, –ø–æ—á–µ–º—É –∂–∏–≤–µ—à—å –æ–¥–∏–Ω, 
        –∏ –≤—Å–µ –Ω–æ—á–∏ –Ω–∞–ø—Ä–æ–ª–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—à—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. 
        –¢—ã –∏—â–µ—à—å –µ–≥–æ. 
        –ó–Ω–∞—é, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–∞–º–∞ –∏—Å–∫–∞–ª–∞. –û–Ω –Ω–∞—à–µ–ª –º–µ–Ω—è –∏ –æ–±—ä—è—Å–Ω–∏–ª, 
        —á—Ç–æ —è –∏—â—É –≤–æ–≤—Å–µ –Ω–µ –µ–≥–æ. –ß—Ç–æ –∏—â—É –æ—Ç–≤–µ—Ç. –ù–∞–º –Ω–µ –¥–∞–µ—Ç –ø–æ–∫–æ—è –≤–æ–ø—Ä–æ—Å, –ù–µ–æ. 
        –û–Ω –∏ –ø—Ä–∏–≤–µ–ª —Ç–µ–±—è —Å—é–¥–∞. –¢—ã –µ–≥–æ –∑–∞–¥–∞—à—å, –∫–∞–∫ –∏ —è —Ç–æ–≥–¥–∞.
        """, parse_mode='markdown')

        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 1)

        self.bot.answer_callback_query(self.call.id, "–ó–∞ —Ç–æ–±–æ–π —Å–ª–µ–¥—è—Ç, –ù–µ–æ.", cache_time='5')
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAAICiWCFJYNCnTcyPsBDGPCtJafJD89eAAI4BAACP5XMCpQbg6Ojk-6iHwQ',
                              reply_markup=self.gen_trinity_markup_club2())

    def trinity_question_in_hostel(self):
        self.bot.send_message(chat_id=self.call.message.chat.id,
                              text="""
        (–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ –õ–∞—Ñ–µ–π–µ—Ç—Ç)
        """, parse_mode='markdown')

        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 1)

        self.bot.send_message(chat_id=self.call.message.chat.id,
                              text="""
        *–¢—Ä–∏–Ω–∏—Ç–∏:* 
        –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –¥–∞—Ç—å —Ç–µ–±–µ –æ–¥–∏–Ω –Ω–µ–±–æ–ª—å—à–æ–π —Å–æ–≤–µ—Ç. 
        –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º. –û–Ω –∑–Ω–∞–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã –º–æ–∂–µ—à—å —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å.
        """, parse_mode='markdown')

        self.bot.answer_callback_query(self.call.id, "–û—Ç–≤–µ—Ç –≥–¥–µ-—Ç–æ —Ç–∞–º, –ù–µ–æ. –û–Ω —Ç–µ–±—è –∏—â–µ—Ç.", cache_time='4')

        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAAIC4mCFLUnf_lW0TNXBGcr3cqf37VDiAAI-BAACP5XMCmXGbS9Z4RFmHwQ',
                              reply_markup=self.gen_trinity_markup_hostel())

    def morpheus_question_in_hostel(self):
        self.bot.send_message(chat_id=self.call.message.chat.id,
                              text="""
        *–ú–æ—Ä—Ñ–µ—É—Å:*
        –£–≤—ã, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ –ú–∞—Ç—Ä–∏—Ü–∞... 
        –¢—ã –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–∞–º. –ù–µ –ø–æ–∑–¥–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è. 
        –ü–æ—Ç–æ–º –ø—É—Ç–∏ –Ω–∞–∑–∞–¥ –Ω–µ –±—É–¥–µ—Ç. 
        –ü—Ä–∏–º–µ—à—å *—Å–∏–Ω—é—é* —Ç–∞–±–ª–µ—Ç–∫—É üíä - –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü. 
        –¢—ã –ø—Ä–æ—Å–Ω–µ—à—å—Å—è –≤ —Å–≤–æ–µ–π –ø–æ—Å—Ç–µ–ª–∏ –∏ –ø–æ–≤–µ—Ä–∏—à—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Å–æ–Ω. 
        –ü—Ä–∏–º–µ—à—å *–∫—Ä–∞—Å–Ω—É—é* —Ç–∞–±–ª–µ—Ç–∫—É üíä - –≤–æ–π–¥–µ—à—å –≤ —Å—Ç—Ä–∞–Ω—É —á—É–¥–µ—Å. 
        –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –≥–ª—É–±–æ–∫–∞ –ª–∏ –∫—Ä–æ–ª–∏—á—å—è –Ω–æ—Ä–∞. 
        –ü–æ–º–Ω–∏, —è –ª–∏—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—é —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ.
        """, parse_mode='markdown')

        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 1)
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 2)

        self.bot.answer_callback_query(self.call.id, "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", cache_time='4')
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAANbYINHPGkKa6MZBeuygEKzQJzzp1sAAngCAALc8qsHISNlidiEbn4fBA',
                              reply_markup=self.gen_morpheus_markup())

    def end_questions_yes(self):
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 1)

        self.bot.answer_callback_query(self.call.id, "*Clock Alarm*", cache_time='5')
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)
        self.bot.send_sticker(chat_id=self.call.message.chat.id,
                              data='CAACAgIAAxkBAAIGjGCGugcIGMx888jwvKgIsZt5I3vMAAIiCwACLw_wBt29ccqyC2nmHwQ',
                              reply_markup=self.gen_again_start_markup())

    def delete_one_call(self):
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)

    def delete_two_call(self):
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id - 1)
        self.bot.answer_callback_query(callback_query_id=self.call.id,
                                       text="*WELCOME TO REALITY*",
                                       show_alert=True,
                                       cache_time='5')
        self.bot.delete_message(
            chat_id=self.call.message.chat.id,
            message_id=self.call.message.message_id)

    def delete_one_message(self):
        self.bot.delete_message(
            chat_id=self.message.chat.id,
            message_id=self.message.message_id - 1)

    def delete_two_message(self):
        self.bot.delete_message(
            chat_id=self.message.chat.id,
            message_id=self.message.message_id - 2)
        self.bot.delete_message(
            chat_id=self.message.chat.id,
            message_id=self.message.message_id - 1)

    def show_reality(self):
        try:
            self.bot.send_video(
                chat_id=self.call.message.chat.id,
                data='BAACAgIAAxkBAAIG7GCGx9-Cmrso2vefg0XgMmdLaeXJAAJpDwACGgU4SDZwTDWTm9IBHwQ',
                reply_markup=user_keyboard_markup())
        except Exception as e:
            print(e)
            video_stream = open('tbot_data/video/The_Matrix_(1999)_Welcome_To_The_Real_World.mp4', 'rb')
            self.bot.send_video(
                chat_id=self.call.message.chat.id,
                data=video_stream,
                # data='BAACAgIAAxkBAAIG7GCGx9-Cmrso2vefg0XgMmdLaeXJAAJpDwACGgU4SDZwTDWTm9IBHwQ',
                reply_markup=user_keyboard_markup(),
                width=640, height=640, duration=60
            )
            video_stream.close()


